generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Card {
  id           String
  numCollected Int         @default(0)
  isFoil       Boolean     @default(false)
  albumId      Int
  Album        Album       @relation(fields: [albumId], references: [id])
  CardDetails  CardDetails @relation(fields: [id], references: [id])

  @@id([id, albumId])
}

model CardDetails {
  arena_id            Int?
  id                  String     @id
  lang                String?
  mtgo_id             Int?
  mtgo_foil_id        Int?
  multiverse_ids      Int[]
  tcgplayer_id        Int?
  tcgplayer_etched_id Int?
  cardmarket_id       Int?
  oracle_id           String?
  prints_search_uri   String?
  rulings_uri         String?
  scryfall_uri        String?
  uri                 String?
  card_faces          CardFace[]
  cmc                 Int?
  color_identity      String[]
  color_indicator     String[]
  colors              String[]
  edhrec_rank         Int?
  hand_modifier       String?
  keywords            String[]
  layout              String?
  life_modifier       String?
  loyalty             String?
  mana_cost           String?
  name                String
  oracle_text         String?
  oversized           Boolean?
  power               String?
  produced_mana       String[]
  reserved            Boolean?
  toughness           String?
  type_line           String?
  artist              String?
  booster             Boolean?
  border_color        String?
  card_back_id        String?
  collectorNumber     Int
  content_warning     Boolean?
  digital             Boolean?
  finishes            String[]
  flavor_name         String?
  flavor_text         String?
  frame_effects       String[]
  frame               String?
  full_art            Boolean?
  games               String[]
  highres_image       Boolean?
  illustration_id     String?
  image_status        String?
  imageUri            String
  smallImageURI       String?
  normalImageURI      String?
  largeImageURI       String?
  pngImageURI         String?
  art_cropImageURI    String?
  border_cropImageURI String?
  printed_name        String?
  printed_text        String?
  printed_type_line   String?
  promo               Boolean?
  promo_types         String[]
  rarity              String
  released_at         String?
  reprint             Boolean?
  scryfall_set_uri    String?
  setCode             String
  setName             String
  setIconSvgUri       String
  set_name            String?
  set_search_uri      String?
  set_type            String?
  set_uri             String?
  set                 String?
  setId               String
  set_id              String?
  story_spotlight     Boolean?
  textless            Boolean?
  variation           Boolean?
  variation_of        String?
  security_stamp      String?
  watermark           String?
  Card                Card[]
  albumId             Int        @ignore
}

model CardFace {
  id                  Int         @ignore
  artist              String?
  cmc                 Int?
  color_indicator     String[]
  colors              String[]
  flavor_text         String?
  illustration_id     String?
  smallImageURI       String?
  normalImageURI      String?
  largeImageURI       String?
  pngImageURI         String?
  art_cropImageURI    String?
  border_cropImageURI String?
  layout              String?
  loyalty             String?
  mana_cost           String?
  name                String
  oracle_id           String?
  oracle_text         String?
  power               String?
  printed_name        String?
  printed_text        String?
  printed_type_line   String?
  toughness           String?
  type_line           String
  watermark           String?
  Card                CardDetails @relation(fields: [cardId], references: [id])
  cardId              String
  faceNumber          Int

  @@id([cardId, faceNumber])
}

model Album {
  id             Int         @id @default(autoincrement())
  name           String
  setId          String?
  setName        String?
  setReleaseDate String?
  cards          Card[]
  collection     Collection? @relation(fields: [collectionId], references: [id])
  collectionId   Int?
}

model Collection {
  id     Int     @id @default(autoincrement())
  name   String
  albums Album[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// next-auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
