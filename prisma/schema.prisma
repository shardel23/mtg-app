generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Card {
  id              String
  name            String
  setId           String
  setName         String
  setCode         String
  setIconSvgUri   String
  rarity          String
  collectorNumber Int
  imageUri        String
  isCollected     Boolean @default(false)
  isFoil          Boolean @default(false)
  albumId         Int
  Album           Album   @relation(fields: [albumId], references: [id])

  @@id([id, albumId])
}

model Album {
  id             Int         @id @default(autoincrement())
  name           String
  setId          String?
  setName        String?
  setReleaseDate String?
  cards          Card[]
  collection     Collection? @relation(fields: [collectionId], references: [id])
  collectionId   Int?
}

model Collection {
  id     Int     @id @default(autoincrement())
  name   String
  albums Album[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// next-auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
